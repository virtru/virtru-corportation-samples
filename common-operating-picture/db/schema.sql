CREATE EXTENSION IF NOT EXISTS postgis;

/*
	#############################################################################
	### src_types TABLE
	#############################################################################
*/

CREATE TABLE IF NOT EXISTS src_types (
	id TEXT PRIMARY KEY,
	form_schema JSONB NOT NULL,
	ui_schema JSONB NULL,
	metadata JSONB NOT NULL
);

/*
	#############################################################################
	### tdf_objects TABLE
	#############################################################################
*/

CREATE TABLE IF NOT EXISTS tdf_objects (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  src_type TEXT NOT NULL,
  geo GEOMETRY NULL,
  search JSONB NULL,
  tdf_blob BYTEA NULL,
  tdf_uri TEXT NULL,
	_created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	_created_by TEXT DEFAULT 'anonymous'
);

COMMENT ON TABLE tdf_objects IS 'stream of tdf data';
COMMENT ON COLUMN tdf_objects.id IS 'uuid primary key generated by the database';
COMMENT ON COLUMN tdf_objects.ts IS 'timestamp generated by the database';
COMMENT ON COLUMN tdf_objects.src_type IS 'source type of the data';
COMMENT ON COLUMN tdf_objects.geo IS 'geospatial data';
COMMENT ON COLUMN tdf_objects.search IS 'plaintext json search index';
COMMENT ON COLUMN tdf_objects.tdf_blob IS 'tdf data blob';
COMMENT ON COLUMN tdf_objects.tdf_uri IS 'tdf data uri';

-- Create notification function
CREATE OR REPLACE FUNCTION notify_tdf_objects_inserted()
	RETURNS trigger AS $$
DECLARE
BEGIN
	PERFORM pg_notify(
		CAST('tdf_objects_inserted' AS text),
		row_to_json(NEW)::TEXT
	);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add trigger to notify on insert
CREATE OR REPLACE TRIGGER notify_tdf_objects_inserted
	AFTER INSERT ON tdf_objects
	FOR EACH ROW
	EXECUTE PROCEDURE notify_tdf_objects_inserted();
