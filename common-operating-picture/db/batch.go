// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	geos "github.com/twpayne/go-geos"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createTdfObjects = `-- name: CreateTdfObjects :batchone
INSERT INTO tdf_objects (ts, src_type, geo, search, tdf_blob, tdf_uri)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateTdfObjectsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateTdfObjectsParams struct {
	Ts      pgtype.Timestamp `json:"ts"`
	SrcType string           `json:"src_type"`
	Geo     *geos.Geom       `json:"geo"`
	Search  []byte           `json:"search"`
	TdfBlob []byte           `json:"tdf_blob"`
	TdfUri  pgtype.Text      `json:"tdf_uri"`
}

// CreateTdfObjects
//
//	INSERT INTO tdf_objects (ts, src_type, geo, search, tdf_blob, tdf_uri)
//	VALUES ($1, $2, $3, $4, $5, $6)
//	RETURNING id
func (q *Queries) CreateTdfObjects(ctx context.Context, arg []CreateTdfObjectsParams) *CreateTdfObjectsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Ts,
			a.SrcType,
			a.Geo,
			a.Search,
			a.TdfBlob,
			a.TdfUri,
		}
		batch.Queue(createTdfObjects, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateTdfObjectsBatchResults{br, len(arg), false}
}

func (b *CreateTdfObjectsBatchResults) QueryRow(f func(int, uuid.UUID, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var id uuid.UUID
		if b.closed {
			if f != nil {
				f(t, id, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&id)
		if f != nil {
			f(t, id, err)
		}
	}
}

func (b *CreateTdfObjectsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
