// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,import_extension=none"
// @generated from file tdf_object/v1/tdf_object.proto (package tdf_object.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum tdf_object.v1.StreamEventType
 */
export enum StreamEventType {
  /**
   * @generated from enum value: STREAM_EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * system events
   *
   * @generated from enum value: STREAM_EVENT_TYPE_STARTUP = 1;
   */
  STARTUP = 1,

  /**
   * @generated from enum value: STREAM_EVENT_TYPE_SHUTDOWN = 2;
   */
  SHUTDOWN = 2,

  /**
   * @generated from enum value: STREAM_EVENT_TYPE_RESTART = 3;
   */
  RESTART = 3,

  /**
   * @generated from enum value: STREAM_EVENT_TYPE_MAINTENANCE = 4;
   */
  MAINTENANCE = 4,

  /**
   * data events
   *
   * @generated from enum value: STREAM_EVENT_TYPE_CONNECTED = 5;
   */
  CONNECTED = 5,

  /**
   * @generated from enum value: STREAM_EVENT_TYPE_HEARTBEAT = 6;
   */
  HEARTBEAT = 6,

  /**
   * generic events
   *
   * @generated from enum value: STREAM_EVENT_TYPE_GENERIC_ERROR = 10;
   */
  GENERIC_ERROR = 10,

  /**
   * @generated from enum value: STREAM_EVENT_TYPE_SERVER_ERROR = 11;
   */
  SERVER_ERROR = 11,

  /**
   * @generated from enum value: STREAM_EVENT_TYPE_DATA_ERROR = 12;
   */
  DATA_ERROR = 12,

  /**
   * tdf_objects stream events
   *
   * @generated from enum value: STREAM_EVENT_TYPE_TDF_OBJECTS_NEW = 20;
   */
  TDF_OBJECTS_NEW = 20,
}
// Retrieve enum metadata with: proto3.getEnumType(StreamEventType)
proto3.util.setEnumType(StreamEventType, "tdf_object.v1.StreamEventType", [
  { no: 0, name: "STREAM_EVENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "STREAM_EVENT_TYPE_STARTUP" },
  { no: 2, name: "STREAM_EVENT_TYPE_SHUTDOWN" },
  { no: 3, name: "STREAM_EVENT_TYPE_RESTART" },
  { no: 4, name: "STREAM_EVENT_TYPE_MAINTENANCE" },
  { no: 5, name: "STREAM_EVENT_TYPE_CONNECTED" },
  { no: 6, name: "STREAM_EVENT_TYPE_HEARTBEAT" },
  { no: 10, name: "STREAM_EVENT_TYPE_GENERIC_ERROR" },
  { no: 11, name: "STREAM_EVENT_TYPE_SERVER_ERROR" },
  { no: 12, name: "STREAM_EVENT_TYPE_DATA_ERROR" },
  { no: 20, name: "STREAM_EVENT_TYPE_TDF_OBJECTS_NEW" },
]);

/**
 * @generated from message tdf_object.v1.TdfObject
 */
export class TdfObject extends Message<TdfObject> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp ts = 2;
   */
  ts?: Timestamp;

  /**
   * source type of data (MARS? what else?)
   *
   * @generated from field: string src_type = 3;
   */
  srcType = "";

  /**
   * geospatial data of location of data
   * TODO consider using google.protobuf.Struct or geobuf https://github.com/murphy214/geobuf
   *
   * @generated from field: string geo = 4;
   */
  geo = "";

  /**
   * plaintext json search index
   *
   * @generated from field: string search = 5;
   */
  search = "";

  /**
   * tdf bytes
   *
   * @generated from field: bytes tdf_blob = 6;
   */
  tdfBlob = new Uint8Array(0);

  /**
   * tdf data uri
   *
   * @generated from field: string tdf_uri = 7;
   */
  tdfUri = "";

  constructor(data?: PartialMessage<TdfObject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.TdfObject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ts", kind: "message", T: Timestamp },
    { no: 3, name: "src_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "geo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tdf_blob", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "tdf_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TdfObject {
    return new TdfObject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TdfObject {
    return new TdfObject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TdfObject {
    return new TdfObject().fromJsonString(jsonString, options);
  }

  static equals(a: TdfObject | PlainMessage<TdfObject> | undefined, b: TdfObject | PlainMessage<TdfObject> | undefined): boolean {
    return proto3.util.equals(TdfObject, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.SrcTypeUiSchemaFieldConfig
 */
export class SrcTypeUiSchemaFieldConfig extends Message<SrcTypeUiSchemaFieldConfig> {
  /**
   * @generated from field: string placeholder = 1;
   */
  placeholder = "";

  /**
   * @generated from field: string widget = 2;
   */
  widget = "";

  /**
   * @generated from field: bool multiple = 3;
   */
  multiple = false;

  constructor(data?: PartialMessage<SrcTypeUiSchemaFieldConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.SrcTypeUiSchemaFieldConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "placeholder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "widget", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "multiple", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SrcTypeUiSchemaFieldConfig {
    return new SrcTypeUiSchemaFieldConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SrcTypeUiSchemaFieldConfig {
    return new SrcTypeUiSchemaFieldConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SrcTypeUiSchemaFieldConfig {
    return new SrcTypeUiSchemaFieldConfig().fromJsonString(jsonString, options);
  }

  static equals(a: SrcTypeUiSchemaFieldConfig | PlainMessage<SrcTypeUiSchemaFieldConfig> | undefined, b: SrcTypeUiSchemaFieldConfig | PlainMessage<SrcTypeUiSchemaFieldConfig> | undefined): boolean {
    return proto3.util.equals(SrcTypeUiSchemaFieldConfig, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.SrcTypeUiSchema
 */
export class SrcTypeUiSchema extends Message<SrcTypeUiSchema> {
  /**
   * @generated from field: repeated string order = 1;
   */
  order: string[] = [];

  /**
   * @generated from field: map<string, tdf_object.v1.SrcTypeUiSchemaFieldConfig> field_config = 2;
   */
  fieldConfig: { [key: string]: SrcTypeUiSchemaFieldConfig } = {};

  constructor(data?: PartialMessage<SrcTypeUiSchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.SrcTypeUiSchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "field_config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: SrcTypeUiSchemaFieldConfig} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SrcTypeUiSchema {
    return new SrcTypeUiSchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SrcTypeUiSchema {
    return new SrcTypeUiSchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SrcTypeUiSchema {
    return new SrcTypeUiSchema().fromJsonString(jsonString, options);
  }

  static equals(a: SrcTypeUiSchema | PlainMessage<SrcTypeUiSchema> | undefined, b: SrcTypeUiSchema | PlainMessage<SrcTypeUiSchema> | undefined): boolean {
    return proto3.util.equals(SrcTypeUiSchema, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.SrcTypeMetadataDisplayFields
 */
export class SrcTypeMetadataDisplayFields extends Message<SrcTypeMetadataDisplayFields> {
  /**
   * @generated from field: string header = 1;
   */
  header = "";

  /**
   * @generated from field: repeated string details = 2;
   */
  details: string[] = [];

  constructor(data?: PartialMessage<SrcTypeMetadataDisplayFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.SrcTypeMetadataDisplayFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SrcTypeMetadataDisplayFields {
    return new SrcTypeMetadataDisplayFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SrcTypeMetadataDisplayFields {
    return new SrcTypeMetadataDisplayFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SrcTypeMetadataDisplayFields {
    return new SrcTypeMetadataDisplayFields().fromJsonString(jsonString, options);
  }

  static equals(a: SrcTypeMetadataDisplayFields | PlainMessage<SrcTypeMetadataDisplayFields> | undefined, b: SrcTypeMetadataDisplayFields | PlainMessage<SrcTypeMetadataDisplayFields> | undefined): boolean {
    return proto3.util.equals(SrcTypeMetadataDisplayFields, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.SrcTypeMetadataMapFieldConfig
 */
export class SrcTypeMetadataMapFieldConfig extends Message<SrcTypeMetadataMapFieldConfig> {
  /**
   * @generated from field: string field = 1;
   */
  field = "";

  /**
   * @generated from field: map<string, string> valueMap = 2;
   */
  valueMap: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SrcTypeMetadataMapFieldConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.SrcTypeMetadataMapFieldConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "valueMap", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SrcTypeMetadataMapFieldConfig {
    return new SrcTypeMetadataMapFieldConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SrcTypeMetadataMapFieldConfig {
    return new SrcTypeMetadataMapFieldConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SrcTypeMetadataMapFieldConfig {
    return new SrcTypeMetadataMapFieldConfig().fromJsonString(jsonString, options);
  }

  static equals(a: SrcTypeMetadataMapFieldConfig | PlainMessage<SrcTypeMetadataMapFieldConfig> | undefined, b: SrcTypeMetadataMapFieldConfig | PlainMessage<SrcTypeMetadataMapFieldConfig> | undefined): boolean {
    return proto3.util.equals(SrcTypeMetadataMapFieldConfig, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.SrcTypeMetadataMapFields
 */
export class SrcTypeMetadataMapFields extends Message<SrcTypeMetadataMapFields> {
  /**
   * @generated from field: string iconDefault = 1;
   */
  iconDefault = "";

  /**
   * @generated from field: repeated tdf_object.v1.SrcTypeMetadataMapFieldConfig iconConfig = 2;
   */
  iconConfig: SrcTypeMetadataMapFieldConfig[] = [];

  /**
   * @generated from field: string colorDefault = 3;
   */
  colorDefault = "";

  /**
   * @generated from field: repeated tdf_object.v1.SrcTypeMetadataMapFieldConfig colorConfig = 4;
   */
  colorConfig: SrcTypeMetadataMapFieldConfig[] = [];

  constructor(data?: PartialMessage<SrcTypeMetadataMapFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.SrcTypeMetadataMapFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "iconDefault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "iconConfig", kind: "message", T: SrcTypeMetadataMapFieldConfig, repeated: true },
    { no: 3, name: "colorDefault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "colorConfig", kind: "message", T: SrcTypeMetadataMapFieldConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SrcTypeMetadataMapFields {
    return new SrcTypeMetadataMapFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SrcTypeMetadataMapFields {
    return new SrcTypeMetadataMapFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SrcTypeMetadataMapFields {
    return new SrcTypeMetadataMapFields().fromJsonString(jsonString, options);
  }

  static equals(a: SrcTypeMetadataMapFields | PlainMessage<SrcTypeMetadataMapFields> | undefined, b: SrcTypeMetadataMapFields | PlainMessage<SrcTypeMetadataMapFields> | undefined): boolean {
    return proto3.util.equals(SrcTypeMetadataMapFields, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.SrcTypeMetadata
 */
export class SrcTypeMetadata extends Message<SrcTypeMetadata> {
  /**
   * @generated from field: string geo_field = 1;
   */
  geoField = "";

  /**
   * @generated from field: repeated string search_fields = 2;
   */
  searchFields: string[] = [];

  /**
   * @generated from field: repeated string attr_fields = 3;
   */
  attrFields: string[] = [];

  /**
   * @generated from field: string ts_field = 4;
   */
  tsField = "";

  /**
   * @generated from field: tdf_object.v1.SrcTypeMetadataDisplayFields display_fields = 5;
   */
  displayFields?: SrcTypeMetadataDisplayFields;

  /**
   * @generated from field: tdf_object.v1.SrcTypeMetadataMapFields map_fields = 6;
   */
  mapFields?: SrcTypeMetadataMapFields;

  constructor(data?: PartialMessage<SrcTypeMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.SrcTypeMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "geo_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "search_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "attr_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "ts_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "display_fields", kind: "message", T: SrcTypeMetadataDisplayFields },
    { no: 6, name: "map_fields", kind: "message", T: SrcTypeMetadataMapFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SrcTypeMetadata {
    return new SrcTypeMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SrcTypeMetadata {
    return new SrcTypeMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SrcTypeMetadata {
    return new SrcTypeMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SrcTypeMetadata | PlainMessage<SrcTypeMetadata> | undefined, b: SrcTypeMetadata | PlainMessage<SrcTypeMetadata> | undefined): boolean {
    return proto3.util.equals(SrcTypeMetadata, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.SrcType
 */
export class SrcType extends Message<SrcType> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Struct form_schema = 2;
   */
  formSchema?: Struct;

  /**
   * @generated from field: tdf_object.v1.SrcTypeUiSchema ui_schema = 3;
   */
  uiSchema?: SrcTypeUiSchema;

  /**
   * @generated from field: tdf_object.v1.SrcTypeMetadata metadata = 4;
   */
  metadata?: SrcTypeMetadata;

  constructor(data?: PartialMessage<SrcType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.SrcType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "form_schema", kind: "message", T: Struct },
    { no: 3, name: "ui_schema", kind: "message", T: SrcTypeUiSchema },
    { no: 4, name: "metadata", kind: "message", T: SrcTypeMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SrcType {
    return new SrcType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SrcType {
    return new SrcType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SrcType {
    return new SrcType().fromJsonString(jsonString, options);
  }

  static equals(a: SrcType | PlainMessage<SrcType> | undefined, b: SrcType | PlainMessage<SrcType> | undefined): boolean {
    return proto3.util.equals(SrcType, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.TimestampSelector
 */
export class TimestampSelector extends Message<TimestampSelector> {
  /**
   * @generated from field: google.protobuf.Timestamp greater_or_equal_to = 1;
   */
  greaterOrEqualTo?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp lesser_or_equal_to = 2;
   */
  lesserOrEqualTo?: Timestamp;

  constructor(data?: PartialMessage<TimestampSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.TimestampSelector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "greater_or_equal_to", kind: "message", T: Timestamp },
    { no: 2, name: "lesser_or_equal_to", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampSelector {
    return new TimestampSelector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampSelector {
    return new TimestampSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampSelector {
    return new TimestampSelector().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampSelector | PlainMessage<TimestampSelector> | undefined, b: TimestampSelector | PlainMessage<TimestampSelector> | undefined): boolean {
    return proto3.util.equals(TimestampSelector, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.CreateTdfObjectRequest
 */
export class CreateTdfObjectRequest extends Message<CreateTdfObjectRequest> {
  /**
   * source type of data (MARS? what else?)
   *
   * @generated from field: string src_type = 1;
   */
  srcType = "";

  /**
   * geospatial data of location of data
   *
   * @generated from field: string geo = 2;
   */
  geo = "";

  /**
   * plaintext json search index
   *
   * @generated from field: string search = 3;
   */
  search = "";

  /**
   * tdf bytes
   *
   * @generated from field: bytes tdf_blob = 4;
   */
  tdfBlob = new Uint8Array(0);

  /**
   * tdf data uri
   *
   * @generated from field: string tdf_uri = 5;
   */
  tdfUri = "";

  /**
   * timestamp of data
   *
   * @generated from field: google.protobuf.Timestamp ts = 6;
   */
  ts?: Timestamp;

  constructor(data?: PartialMessage<CreateTdfObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.CreateTdfObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "src_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "geo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tdf_blob", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "tdf_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "ts", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTdfObjectRequest {
    return new CreateTdfObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTdfObjectRequest {
    return new CreateTdfObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTdfObjectRequest {
    return new CreateTdfObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTdfObjectRequest | PlainMessage<CreateTdfObjectRequest> | undefined, b: CreateTdfObjectRequest | PlainMessage<CreateTdfObjectRequest> | undefined): boolean {
    return proto3.util.equals(CreateTdfObjectRequest, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.CreateTdfObjectResponse
 */
export class CreateTdfObjectResponse extends Message<CreateTdfObjectResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CreateTdfObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.CreateTdfObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTdfObjectResponse {
    return new CreateTdfObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTdfObjectResponse {
    return new CreateTdfObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTdfObjectResponse {
    return new CreateTdfObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTdfObjectResponse | PlainMessage<CreateTdfObjectResponse> | undefined, b: CreateTdfObjectResponse | PlainMessage<CreateTdfObjectResponse> | undefined): boolean {
    return proto3.util.equals(CreateTdfObjectResponse, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.GetTdfObjectRequest
 */
export class GetTdfObjectRequest extends Message<GetTdfObjectRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetTdfObjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.GetTdfObjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTdfObjectRequest {
    return new GetTdfObjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTdfObjectRequest {
    return new GetTdfObjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTdfObjectRequest {
    return new GetTdfObjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTdfObjectRequest | PlainMessage<GetTdfObjectRequest> | undefined, b: GetTdfObjectRequest | PlainMessage<GetTdfObjectRequest> | undefined): boolean {
    return proto3.util.equals(GetTdfObjectRequest, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.GetTdfObjectResponse
 */
export class GetTdfObjectResponse extends Message<GetTdfObjectResponse> {
  /**
   * @generated from field: tdf_object.v1.TdfObject tdf_object = 1;
   */
  tdfObject?: TdfObject;

  constructor(data?: PartialMessage<GetTdfObjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.GetTdfObjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tdf_object", kind: "message", T: TdfObject },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTdfObjectResponse {
    return new GetTdfObjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTdfObjectResponse {
    return new GetTdfObjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTdfObjectResponse {
    return new GetTdfObjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTdfObjectResponse | PlainMessage<GetTdfObjectResponse> | undefined, b: GetTdfObjectResponse | PlainMessage<GetTdfObjectResponse> | undefined): boolean {
    return proto3.util.equals(GetTdfObjectResponse, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.QueryTdfObjectsRequest
 */
export class QueryTdfObjectsRequest extends Message<QueryTdfObjectsRequest> {
  /**
   * @generated from field: tdf_object.v1.TimestampSelector ts_range = 1;
   */
  tsRange?: TimestampSelector;

  /**
   * @generated from field: string src_type = 2;
   */
  srcType = "";

  /**
   * @generated from field: string geo_location = 3;
   */
  geoLocation = "";

  /**
   * @generated from field: string search = 4;
   */
  search = "";

  constructor(data?: PartialMessage<QueryTdfObjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.QueryTdfObjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ts_range", kind: "message", T: TimestampSelector },
    { no: 2, name: "src_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "geo_location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTdfObjectsRequest {
    return new QueryTdfObjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTdfObjectsRequest {
    return new QueryTdfObjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTdfObjectsRequest {
    return new QueryTdfObjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTdfObjectsRequest | PlainMessage<QueryTdfObjectsRequest> | undefined, b: QueryTdfObjectsRequest | PlainMessage<QueryTdfObjectsRequest> | undefined): boolean {
    return proto3.util.equals(QueryTdfObjectsRequest, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.QueryTdfObjectsResponse
 */
export class QueryTdfObjectsResponse extends Message<QueryTdfObjectsResponse> {
  /**
   * @generated from field: repeated tdf_object.v1.TdfObject tdf_objects = 1;
   */
  tdfObjects: TdfObject[] = [];

  constructor(data?: PartialMessage<QueryTdfObjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.QueryTdfObjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tdf_objects", kind: "message", T: TdfObject, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTdfObjectsResponse {
    return new QueryTdfObjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTdfObjectsResponse {
    return new QueryTdfObjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTdfObjectsResponse {
    return new QueryTdfObjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTdfObjectsResponse | PlainMessage<QueryTdfObjectsResponse> | undefined, b: QueryTdfObjectsResponse | PlainMessage<QueryTdfObjectsResponse> | undefined): boolean {
    return proto3.util.equals(QueryTdfObjectsResponse, a, b);
  }
}

/**
 * todo: intentionally left empty until we decide if any filtering needs to be done
 *
 * @generated from message tdf_object.v1.StreamTdfObjectsRequest
 */
export class StreamTdfObjectsRequest extends Message<StreamTdfObjectsRequest> {
  constructor(data?: PartialMessage<StreamTdfObjectsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.StreamTdfObjectsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamTdfObjectsRequest {
    return new StreamTdfObjectsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamTdfObjectsRequest {
    return new StreamTdfObjectsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamTdfObjectsRequest {
    return new StreamTdfObjectsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamTdfObjectsRequest | PlainMessage<StreamTdfObjectsRequest> | undefined, b: StreamTdfObjectsRequest | PlainMessage<StreamTdfObjectsRequest> | undefined): boolean {
    return proto3.util.equals(StreamTdfObjectsRequest, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.StreamTdfObjectsResponse
 */
export class StreamTdfObjectsResponse extends Message<StreamTdfObjectsResponse> {
  /**
   * @generated from field: tdf_object.v1.StreamEventType event_type = 1;
   */
  eventType = StreamEventType.UNSPECIFIED;

  /**
   * @generated from field: string event_detail = 2;
   */
  eventDetail = "";

  /**
   * @generated from field: repeated tdf_object.v1.TdfObject tdf_objects = 6;
   */
  tdfObjects: TdfObject[] = [];

  constructor(data?: PartialMessage<StreamTdfObjectsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.StreamTdfObjectsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_type", kind: "enum", T: proto3.getEnumType(StreamEventType) },
    { no: 2, name: "event_detail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tdf_objects", kind: "message", T: TdfObject, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamTdfObjectsResponse {
    return new StreamTdfObjectsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamTdfObjectsResponse {
    return new StreamTdfObjectsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamTdfObjectsResponse {
    return new StreamTdfObjectsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamTdfObjectsResponse | PlainMessage<StreamTdfObjectsResponse> | undefined, b: StreamTdfObjectsResponse | PlainMessage<StreamTdfObjectsResponse> | undefined): boolean {
    return proto3.util.equals(StreamTdfObjectsResponse, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.ListSrcTypesRequest
 */
export class ListSrcTypesRequest extends Message<ListSrcTypesRequest> {
  constructor(data?: PartialMessage<ListSrcTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.ListSrcTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSrcTypesRequest {
    return new ListSrcTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSrcTypesRequest {
    return new ListSrcTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSrcTypesRequest {
    return new ListSrcTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSrcTypesRequest | PlainMessage<ListSrcTypesRequest> | undefined, b: ListSrcTypesRequest | PlainMessage<ListSrcTypesRequest> | undefined): boolean {
    return proto3.util.equals(ListSrcTypesRequest, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.ListSrcTypesResponse
 */
export class ListSrcTypesResponse extends Message<ListSrcTypesResponse> {
  /**
   * @generated from field: repeated string src_types = 1;
   */
  srcTypes: string[] = [];

  constructor(data?: PartialMessage<ListSrcTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.ListSrcTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "src_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSrcTypesResponse {
    return new ListSrcTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSrcTypesResponse {
    return new ListSrcTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSrcTypesResponse {
    return new ListSrcTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSrcTypesResponse | PlainMessage<ListSrcTypesResponse> | undefined, b: ListSrcTypesResponse | PlainMessage<ListSrcTypesResponse> | undefined): boolean {
    return proto3.util.equals(ListSrcTypesResponse, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.GetSrcTypeRequest
 */
export class GetSrcTypeRequest extends Message<GetSrcTypeRequest> {
  /**
   * @generated from field: string src_type = 1;
   */
  srcType = "";

  constructor(data?: PartialMessage<GetSrcTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.GetSrcTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "src_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSrcTypeRequest {
    return new GetSrcTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSrcTypeRequest {
    return new GetSrcTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSrcTypeRequest {
    return new GetSrcTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSrcTypeRequest | PlainMessage<GetSrcTypeRequest> | undefined, b: GetSrcTypeRequest | PlainMessage<GetSrcTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetSrcTypeRequest, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.GetSrcTypeResponse
 */
export class GetSrcTypeResponse extends Message<GetSrcTypeResponse> {
  /**
   * @generated from field: tdf_object.v1.SrcType src_type = 1;
   */
  srcType?: SrcType;

  constructor(data?: PartialMessage<GetSrcTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.GetSrcTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "src_type", kind: "message", T: SrcType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSrcTypeResponse {
    return new GetSrcTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSrcTypeResponse {
    return new GetSrcTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSrcTypeResponse {
    return new GetSrcTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSrcTypeResponse | PlainMessage<GetSrcTypeResponse> | undefined, b: GetSrcTypeResponse | PlainMessage<GetSrcTypeResponse> | undefined): boolean {
    return proto3.util.equals(GetSrcTypeResponse, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.GetEntitlementsRequest
 */
export class GetEntitlementsRequest extends Message<GetEntitlementsRequest> {
  constructor(data?: PartialMessage<GetEntitlementsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.GetEntitlementsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEntitlementsRequest {
    return new GetEntitlementsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEntitlementsRequest {
    return new GetEntitlementsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEntitlementsRequest {
    return new GetEntitlementsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEntitlementsRequest | PlainMessage<GetEntitlementsRequest> | undefined, b: GetEntitlementsRequest | PlainMessage<GetEntitlementsRequest> | undefined): boolean {
    return proto3.util.equals(GetEntitlementsRequest, a, b);
  }
}

/**
 * @generated from message tdf_object.v1.GetEntitlementsResponse
 */
export class GetEntitlementsResponse extends Message<GetEntitlementsResponse> {
  /**
   * @generated from field: map<string, bool> entitlements = 1;
   */
  entitlements: { [key: string]: boolean } = {};

  constructor(data?: PartialMessage<GetEntitlementsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tdf_object.v1.GetEntitlementsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entitlements", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEntitlementsResponse {
    return new GetEntitlementsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEntitlementsResponse {
    return new GetEntitlementsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEntitlementsResponse {
    return new GetEntitlementsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEntitlementsResponse | PlainMessage<GetEntitlementsResponse> | undefined, b: GetEntitlementsResponse | PlainMessage<GetEntitlementsResponse> | undefined): boolean {
    return proto3.util.equals(GetEntitlementsResponse, a, b);
  }
}

